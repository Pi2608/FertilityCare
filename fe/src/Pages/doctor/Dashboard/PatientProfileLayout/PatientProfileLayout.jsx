import { useState, useEffect,  useCallback, memo } from "react"
import ApiGateway from "../../../../features/service/apiGateway"
import { useParams } from "react-router-dom"
import { HashLoader, BeatLoader } from "react-spinners";
import { showSuccess, showFail, confirmToast } from "@lib/toast/toast"
import "./PatientProfileLayout.css"

const PatientProfileLayout = () => {
  const { appointmentId, customerId } = useParams();
  const [activeTab, setActiveTab] = useState("overview")
  const [expandedSections, setExpandedSections] = useState({
    medicalHistory: true,
    familyHistory: true,
    allergies: true,
    medicalRecords: false,
    prescribedMeds: false,
  })
  const [currentCycle, setCurrentCycle] = useState(null); // Chu k·ª≥ ƒëi·ªÅu tr·ªã hi·ªán t·∫°i
  const [appointmentHistory, setAppointmentHistory] = useState([]); // L·ªãch s·ª≠ cu·ªôc h·∫πn
  const [cycleSteps, setCycleSteps] = useState([]); // B∆∞·ªõc ƒëi·ªÅu tr·ªã c·ªßa chu k·ª≥
  const [cycleStepNames, setCycleStepNames] = useState([]); // T√™n c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã
  const [cycleStepDetails, setCycleStepDetails] = useState([]); // Chi ti·∫øt step
  const [pastAndCurrentSteps, setPastAndCurrentSteps] = useState([]); // C√°c b∆∞·ªõc ƒë√£ v√† ƒëang th·ª±c hi·ªán
  const [medicationSchedules, setMedicationSchedules] = useState([]); // L·ªãch u·ªëng thu·ªëc theo b∆∞·ªõc
  const [allMedicines, setAllMedicines] = useState([]); // Danh s√°ch thu·ªëc
  const [testResults, setTestResults] = useState([]); // K·∫øt qu·∫£ x√©t nghi·ªám
  const [loading, setLoading] = useState(false); // Loading chung cho c√°c thao t√°c async

  const [createMedicationScheduleForm, setCreateMedicationScheduleForm] = useState({
    cycleId: "",
    stepId: ""
  })

  const [updateCycleStepNoteForm, setUpdateCycleStepNoteForm] = useState({
    cycleId: "",
    stepOrder: "",
    note: ""
  });

  const [updateTestResultForm, setUpdateTestResultForm] = useState({
    id: "",
    name: "",
    value: "",
    unit: "",
    referenceRange: "",
    note: "",
    testDate: ""
  });

  const [isOpenCreateReExamModal, setIsOpenCreateReExamModal] = useState(false); // Modal t·∫°o l·ªãch h·∫πn t√°i kh√°m
  const [isOpenCreateMedicationModal, setIsOpenCreateMedicationModal] = useState(false); // Modal t·∫°o l·ªãch u·ªëng thu·ªëc
  const [isOpenCreateTestResultModal, setIsOpenCreateTestResultModal] = useState(false); // Modal t·∫°o k·∫øt qu·∫£ x√©t nghi·ªám
  const [isOpenUpdateCycleStepNoteModal, setIsOpenUpdateCycleStepNoteModal] = useState(false); // Modal c·∫≠p nh·∫≠t ghi ch√∫ chu k·ª≥
  const [isOpenUpdateTestResultModal, setIsOpenUpdateTestResultModal] = useState(false); // Modal c·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám

  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }))
  }


  const patientData = {
    name: "Nguy·ªÖn Th·ªã Hoa",
    id: "PT-2024-0123",
    status: "ƒêang ƒëi·ªÅu tr·ªã",
    age: 34,
    birthDate: "15/06/1989",
    gender: "N·ªØ",
    phone: "0912345678",
    email: "hoa.nguyen@email.com",
    address: "123 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM",
    treatment: "IVF Chu k·ª≥ #2",
    startDate: "01/04/2024",
    doctor: "BS. Nguy·ªÖn Lan Anh",
    medicalHistory: [
      "V√¥ sinh nguy√™n ph√°t",
      "L·∫°c n·ªôi m·∫°c t·ª≠ cung nh·∫π",
      "ƒê√£ tr·∫£i qua 1 chu k·ª≥ IVF kh√¥ng th√†nh c√¥ng (12/2023)"
    ],
    familyHistory: [
      "Kh√¥ng c√≥ ti·ªÅn s·ª≠ gia ƒë√¨nh v·ªÅ v√¥ sinh",
      "M·∫π c√≥ ti·ªÅn s·ª≠ l·∫°c n·ªôi m·∫°c t·ª≠ cung"
    ],
    allergies: ["Kh√¥ng c√≥"],
    currentAppointment: {
      date: "20/05/2024",
      time: "09:00 - 09:30",
      status: "ƒêang di·ªÖn ra",
     
    }
  }


  const tabs = [
    { id: "overview", label: "T·ªïng quan", icon: "üë§" },
    { id: "schedule", label: "L·ªãch h·∫πn", icon: "üìÖ" },
    { id: "notes", label: "Ghi ch√∫ kh√°m", icon: "üìù" },
    { id: "results", label: "K·∫øt qu·∫£ x√©t nghi·ªám", icon: "üìã" },
    { id: "medications", label: "Thu·ªëc", icon: "üíä" },
  ]

  //Open handlers
  const handleOpenCreateReExamAppointmentModal = useCallback(() => {
    setIsOpenCreateReExamModal(true);
  }, []);

  const handleOpenCreateMedicationModal = useCallback(() => {
    setIsOpenCreateMedicationModal(true);
  }, []);

  const handleOpenCreateTestResultModal = useCallback(() => {
    setIsOpenCreateTestResultModal(true);
  }, []);

  const handleOpenUpdateCycleStepNoteModal = useCallback(() => {
    setIsOpenUpdateCycleStepNoteModal(true);
  }, []);

  const handleOpenUpdateTestResultModal = useCallback(() => {
    setIsOpenUpdateTestResultModal(true);
  }, []);

  // Close handlers
  const handleCloseCreateReExamAppointmentModal = () => {
    setIsOpenCreateReExamModal(false);
  };

  const handleCloseCreateMedicationModal = () => {
    setIsOpenCreateMedicationModal(false);
  };

  const handleCloseCreateTestResultModal = () => {
    setIsOpenCreateTestResultModal(false);
  };

  const handleCloseUpdateCycleStepNoteModal = () => {
    setIsOpenUpdateCycleStepNoteModal(false);
  };

  const handleCloseUpdateTestResultModal = () => {
    setIsOpenUpdateTestResultModal(false);
  };  

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
    return new Date(dateString).toLocaleDateString('vi-VN', options);
  }

  const mappingStepsName = (stepOrder) => {
    if (!cycleStepNames || cycleStepNames.length === 0) {
      return `B∆∞·ªõc ${stepOrder}`;
    }
    const step = cycleStepNames.find(name => name.stepOrder === stepOrder);
    return step ? step.title : `B∆∞·ªõc ${stepOrder}`;
  }

  const getCurrentStepPeriod = (stepOrder) => {
    const step = cycleSteps.find(phase => phase.stepOrder === stepOrder);
    const nextStep = cycleSteps.find(phase => phase.stepOrder === stepOrder + 1);
    if (step && nextStep) {
      return `${new Date(step.eventdate).toLocaleDateString("vi-VN")} - ${new Date(nextStep.eventdate).toLocaleDateString("vi-VN")}`;
    } else if (step) {
      return `${new Date(step.eventdate).toLocaleDateString("vi-VN")} - Hi·ªán t·∫°i`;
    }
  }

  const collectNotesFromAppointments = (cycleStepData) => {
    if (!cycleStepData?.appointment || !Array.isArray(cycleStepData.appointment)) {
      return [];
    }

    return cycleStepData.appointment
      .filter(app => app.note?.trim())      
      .map(app => ({
        note: app.note.trim(),
        date: app.date.split('T')[0],
        doctor: app.doctorName
      }));
  }

  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      // Reset c√°c state l∆∞u m·∫£ng chi ti·∫øt tr∆∞·ªõc khi fetch m·ªõi
      setCycleStepDetails([]);
      setPastAndCurrentSteps([]);
      setMedicationSchedules([]);
      
      let crtCycle = await getCurrentCyclesOfPatient(customerId);

      await Promise.all([
        getAppointmentHistoryByCustomer(customerId),
        getTestResultsByCustomer(customerId),
        getAllMedicines(),
      ]);

      if (crtCycle?.data?.cycleId) {
        await Promise.all([
          getCycleStepNames(crtCycle.data.cycleId),
          getCycleStepsByCycle(crtCycle.data.cycleId),
          ...crtCycle.data.cycleStep.map(element =>
            getCycleStepsDetails(element.stepId)
          ),
          ...crtCycle.data.cycleStep.map(element =>
            getCycleStepDetails(crtCycle.data.cycleId, element.stepOrder)
          ),
          ...crtCycle.data.cycleStep.map(element =>
            getSchedulesByCycleStep(crtCycle.data.cycleId, element.stepOrder)
          )
        ]);
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
    } finally {
      await new Promise(resolve => setTimeout(resolve, 500));
      setLoading(false);
    }
  }, [customerId]);

  // 1. L·∫•y chu k·ª≥ ƒëi·ªÅu tr·ªã hi·ªán t·∫°i c·ªßa b·ªánh nh√¢n (b√°c sƒ©)
  const getCurrentCyclesOfPatient = async (customerId) => {
    try {
      const res = await ApiGateway.getCurrentCyclesOfPatient(customerId);
      setCurrentCycle(res.data);
      return res;
    } catch (error) {
      console.error("L·ªói l·∫•y chu k·ª≥ ƒëi·ªÅu tr·ªã hi·ªán t·∫°i:", error);
      throw error;
    }
  };

  // 2. ƒê·∫∑t l·ªãch h·∫πn t√°i kh√°m
  const createReExamAppointment = async (dto) => {
    try {
      const res = await ApiGateway.createReExamAppointment(dto);
      return res;
    } catch (error) {
      console.error("L·ªói ƒë·∫∑t l·ªãch t√°i kh√°m:", error);
      throw error;
    }
  };

  // 3. H·ªßy cu·ªôc h·∫πn
  const cancelAppointment = async (appointmentId) => {
    try {
      const res = await ApiGateway.cancelAppointment(appointmentId);
      return res;
    } catch (error) {
      console.error("L·ªói h·ªßy cu·ªôc h·∫πn:", error);
      throw error;
    }
  };

  // 4. C·∫≠p nh·∫≠t d·ªãch v·ª• cho cu·ªôc h·∫πn
  const updateAppointmentService = async (appointmentId, dto) => {
    try {
      const res = await ApiGateway.updateAppointmentService(appointmentId, dto);
      return res;
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t d·ªãch v·ª• cu·ªôc h·∫πn:", error);
      throw error;
    }
  };

  // 5. L·∫•y l·ªãch s·ª≠ cu·ªôc h·∫πn c·ªßa b·ªánh nh√¢n
  const getAppointmentHistoryByCustomer = async (customerId) => {
    try {
      const res = await ApiGateway.getAppointmentHistoryByCustomer(customerId);
      setAppointmentHistory(res);
      return res;
    } catch (error) {
      console.error("L·ªói l·∫•y l·ªãch s·ª≠ cu·ªôc h·∫πn:", error);
      throw error;
    }
  };

  // 6. L·∫•y danh s√°ch b∆∞·ªõc ƒëi·ªÅu tr·ªã c·ªßa chu k·ª≥
  const getCycleStepsByCycle = async (cycleId) => {
    try {
      const res = await ApiGateway.getCycleStepsByCycleId(cycleId);
      setCycleSteps(res.data);
      return res;
    } catch (error) {
      console.error("L·ªói l·∫•y b∆∞·ªõc ƒëi·ªÅu tr·ªã c·ªßa chu k·ª≥:", error);
      throw error;
    }
  };

  // 7. C·∫≠p nh·∫≠t tr·∫°ng th√°i b∆∞·ªõc ƒëi·ªÅu tr·ªã
  const updateCycleStepStatus = async (cycleId, stepOrder, status) => {
    try {
      const res = await ApiGateway.updateCycleStepStatus(cycleId, stepOrder, status);
      return res;
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  };

  // 8. C·∫≠p nh·∫≠t ghi ch√∫ cho b∆∞·ªõc ƒëi·ªÅu tr·ªã
  const updateCycleStepNote = async (cycleId, stepOrder, note) => {
    try {
      const res = await ApiGateway.updateCycleStepNote(cycleId, stepOrder, note);
      return res;
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t ghi ch√∫ b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  };

  // 9. L·∫•y chi ti·∫øt step (note, test, medician)
  const getCycleStepsDetails = async (cycleStepId) => {
    try {
      const res = await ApiGateway.getCycleStepDetails(cycleStepId);
      setCycleStepDetails(prev => [...prev, res]);
      return res;
    } catch (error) {
      console.error("L·ªói l·∫•y chi ti·∫øt b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  };

  // 10. T·∫°o l·ªãch u·ªëng thu·ªëc
  const createMedicationSchedule = async (schedule) => {
    try {
      const res = await ApiGateway.createMedicationSchedule(schedule);
      return res;
    } catch (error) {
      console.error("L·ªói t·∫°o l·ªãch u·ªëng thu·ªëc:", error);
      throw error;
    }
  };

  // 11. L·∫•y l·ªãch u·ªëng thu·ªëc theo chu k·ª≥ v√† b∆∞·ªõc ƒëi·ªÅu tr·ªã
  const getSchedulesByCycleStep = async (cycleId, stepOrder) => {
    try {
      const res = await ApiGateway.getSchedulesByCycleStep(cycleId, stepOrder);
      setMedicationSchedules(res.data);
      return res.data;
    } catch (error) {
      console.error("L·ªói l·∫•y l·ªãch thu·ªëc theo b∆∞·ªõc:", error);
      throw error;
    }
  };

  // 12. L·∫•y danh s√°ch thu·ªëc
  const getAllMedicines = async () => {
    try {
      const res = await ApiGateway.getAllMedicines();
      setAllMedicines(res.data);
      return res.data;
    } catch (error) {
      console.error("L·ªói l·∫•y danh s√°ch thu·ªëc:", error);
      throw error;
    }
  };

  // 13. L·∫•y k·∫øt qu·∫£ x√©t nghi·ªám c·ªßa b·ªánh nh√¢n
  const getTestResultsByCustomer = async (customerId) => {
    try {
      const res = await ApiGateway.getCustomerTestResults(customerId);
      setTestResults(res.data);
      return res.data;
    } catch (error) {
      console.error("L·ªói l·∫•y k·∫øt qu·∫£ x√©t nghi·ªám:", error);
      throw error;
    }
  };

  // 14. T·∫°o m·ªõi k·∫øt qu·∫£ x√©t nghi·ªám
  const createTestResult = async (dto) => {
    try {
      const res = await ApiGateway.createTestResult(dto);
      return res;
    } catch (error) {
      console.error("L·ªói t·∫°o k·∫øt qu·∫£ x√©t nghi·ªám:", error);
      throw error;
    }
  };

  // 15. C·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám
  const updateTestResult = async (id, dto) => {
    try {
      const res = await ApiGateway.updateTestResult(id, dto);
      return res;
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám:", error);
      throw error;
    }
  };

  // 16. L·∫•y t√™n c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã
  const getCycleStepNames = async (cycleId) => {
    try {
      const res = await ApiGateway.getTreatmentSteps(cycleId);
      setCycleStepNames(res.data);
      return res.data;
    } catch (error) {
      console.error("L·ªói l·∫•y t√™n c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  }

  // 17. L·∫•y chi ti·∫øt c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã ƒë√£ v√† ƒëang th·ª±c hi·ªán
  const getCycleStepDetails = async (cycleId, stepOrder) => {
    try {
      const res = await ApiGateway.getCycleStep(cycleId, stepOrder);
      setPastAndCurrentSteps(prev => [...prev, res.data]);
      return res.data;
    } catch (error) {
      console.error("L·ªói l·∫•y chi ti·∫øt b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  }

  //18. C·∫≠p nh·∫≠t ghi ch√∫ cho chu k·ª≥ ƒëi·ªÅu tr·ªã
  const updateCycleNote = async (cycleStepId, note) => {
    try {
      const res = await ApiGateway.updateCycleNote(cycleStepId, note);
      setCurrentCycle(prev => ({
        ...prev,
        cycleStep: prev.cycleStep.map(step =>
          step.stepId === cyleStepId ? { ...step, note } : step
        )
      }));
      return res.data;
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t ghi ch√∫ b∆∞·ªõc ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  };
  
  useEffect(() => {
    if (customerId) {
      fetchData();
    }
  }, [customerId, fetchData]);

  const renderOverviewTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-treatment-plan">
        <h3>K·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã</h3>
        <p className="patient-profile-treatment-subtitle">Th√¥ng tin v·ªÅ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã hi·ªán t·∫°i</p>


        <div className="patient-profile-treatment-cards">
          <div className="patient-profile-treatment-card patient-profile-current">
            <div className="patient-profile-card-icon">
              <span className="patient-profile-icon-red">‚ö†Ô∏è</span>
            </div>
            <div className="patient-profile-card-content">
              <h4>Giai ƒëo·∫°n hi·ªán t·∫°i</h4>
              <p>{mappingStepsName(currentCycle?.cycleStep.length)}</p>
            </div>
          </div>


          <div className="patient-profile-treatment-card patient-profile-next">
            <div className="patient-profile-card-icon">
              <span className="patient-profile-icon-blue">üìÖ</span>
            </div>
            <div className="patient-profile-card-content">
              <h4>Giai ƒëo·∫°n ti·∫øp theo</h4>
              <p>{mappingStepsName(currentCycle?.cycleStep.length + 1)}</p>
              <span className="patient-profile-date"></span>
            </div>
          </div>
        </div>

        <div className="patient-profile-treatment-timeline">
          <h3>To√†n b·ªô giai ƒëo·∫°n ƒëi·ªÅu tr·ªã</h3>
          <div className="patient-profile-timeline">
            {pastAndCurrentSteps?.map((phase, idx) => (
              <div key={`key-${phase.stepId}-${idx}`} className={`patient-profile-timeline-item patient-profile-${phase.statusCycleStep}`}>
                <div className="patient-profile-timeline-marker">
                  {phase.statusCycleStep === 'completed' ? '‚úì' : phase.statusCycleStep === 'ongoing' ? '‚è≥' : 'üìÖ'}
                </div>
                <div className="patient-profile-timeline-content">
                  <div className="patient-profile-timeline-header">
                    <h4>Giai ƒëo·∫°n {phase.stepOrder}: {mappingStepsName(phase.stepOrder)}</h4>
                    <span className="patient-profile-timeline-date">{getCurrentStepPeriod(phase.stepOrder)}</span>
                  </div>
                  <div className="patient-profile-timeline-details">
                    {/* Ghi ch√∫ */}
                    {collectNotesFromAppointments(pastAndCurrentSteps[phase.stepOrder - 1]).length > 0 ? (
                      <div className="patient-profile-timeline-section">
                   
                        {collectNotesFromAppointments(pastAndCurrentSteps[phase.stepOrder - 1]).map((note, index) => (
                          <div key={index} className="patient-profile-timeline-note">
                            <p><strong>{note.date}:</strong> {note.note}</p>
                            <span className="patient-profile-note-doctor">- BS. {note.doctor}</span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="patient-profile-timeline-section">
                        <p>Ch∆∞a c√≥ ghi ch√∫ cho giai ƒëo·∫°n n√†y.</p>
                      </div>
                    )}


                    {/* K·∫øt qu·∫£ x√©t nghi·ªám */}
                    <h5>üìã K·∫øt qu·∫£ x√©t nghi·ªám:</h5>
                    {cycleStepDetails?.[phase.stepOrder - 1]?.testResults?.length > 0 ? (
                      <div className="patient-profile-timeline-section">
                        <ul>
                          {cycleStepDetails?.[phase.stepOrder - 1]?.testResults.map((result, index) => (
                            <li key={index}>
                              <strong>{result.name}:</strong> {result.value} {result.unit} ({result.note} : {result.referenceRange}) - {formatDate(result.testDate)}
                            </li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <div className="patient-profile-timeline-section">
                          <p>Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám cho giai ƒëo·∫°n n√†y.</p>
                        </div>
                      )
                    }


                    {/* Thu·ªëc s·ª≠ d·ª•ng */}
                    <h5>üíä Thu·ªëc s·ª≠ d·ª•ng:</h5>
                    {cycleStepDetails?.[phase.stepOrder - 1]?.medicineSchedules?.length > 0 ? (
                      <div className="patient-profile-timeline-section">
                        <ul>
                          {cycleStepDetails?.[phase.stepOrder - 1]?.medicineSchedules.map((med, index) => (
                            <li key={index}>
                              <strong>{med.medicineName}:</strong> {med.frequency} - M·ªói l·∫ßn {med.dose} ({med.startDate} - {med.endDate})
                            </li>
                          ))}
                        </ul>
                      </div>
                    ) : 
                    (
                      <div className="patient-profile-timeline-section">
                        <p>Ch∆∞a c√≥ thu·ªëc s·ª≠ d·ª•ng cho giai ƒëo·∫°n n√†y.</p> 
                      </div>
                    )}


                    {/* Action buttons cho t·ª´ng giai ƒëo·∫°n */}
                    <h5>‚ö° C·∫≠p nh·∫≠t nhanh:</h5>
                    <div className="patient-profile-timeline-actions">
                      {phase.statusCycleStep === 'ongoing' && (
                        <div className="patient-profile-phase-actions">
                          <div className="patient-profile-quick-actions">
                            <button className="patient-profile-btn-outline-small" 
                              onClick={() => {
                                setUpdateCycleStepNoteForm({
                                  cycleId: currentCycle?.cycleId,
                                  stepOrder: phase?.stepOrder,
                                  note: pastAndCurrentSteps?.[pastAndCurrentSteps.length - 1]?.note || ''
                                }),
                                handleOpenUpdateCycleStepNoteModal()
                              }}
                            >üìù Ghi ch√∫</button>
                            <button className="patient-profile-btn-outline-small" 
                              onClick={() => handleOpenCreateTestResultModal()}
                            >üìã K·∫øt qu·∫£ XN</button>
                            <button className="patient-profile-btn-outline-small" 
                              onClick={() => handleOpenCreateMedicationModal()}>üíä Thu·ªëc</button>
                          </div>
                        </div>
                      )}
                      {phase.status === 'upcoming' && (
                        <div className="patient-profile-phase-actions">
                         
                          <div className="patient-profile-quick-actions">
                            <button className="patient-profile-btn-primary-small" onClick={() => {console.log("hey"),handleOpenCreateReExamAppointmentModal()}}>üìÖ ƒê·∫∑t l·ªãch h·∫πn</button>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            { pastAndCurrentSteps.length < cycleSteps.length && (
              <div className={`patient-profile-timeline-item patient-profile-upcoming`}>
                <div className="patient-profile-timeline-marker">
                  üìÖ
                </div>
                <div className="patient-profile-timeline-content">
                  <div className="patient-profile-timeline-header">
                    <h4>Giai ƒëo·∫°n {pastAndCurrentSteps.length + 1}: {mappingStepsName(pastAndCurrentSteps.length + 1)}</h4>
                    <span className="patient-profile-timeline-date">Ch∆∞a b·∫Øt ƒë·∫ßu</span>
                  </div>
                </div>
                <div className="patient-profile-timeline-details">
                  <div className="patient-profile-timeline-section">
                    <div className="patient-profile-timeline-note">
                      <p style={{marginBottom: '1rem'}}>Giai ƒëo·∫°n n√†y s·∫Ω b·∫Øt ƒë·∫ßu sau khi ho√†n th√†nh giai ƒëo·∫°n hi·ªán t·∫°i.</p>
                    </div>
                  </div>
                </div>
                <div className="patient-profile-timeline-actions">
                  <div className="patient-profile-phase-actions">
                    <div className="patient-profile-quick-actions">
                      <button className="patient-profile-btn-primary-small" onClick={() => handleOpenCreateReExamAppointmentModal()}>üìÖ ƒê·∫∑t l·ªãch h·∫πn</button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )


  const renderScheduleTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-schedule-header">
        <div>
          <h3>L·ªãch h·∫πn</h3>
          <p>L·ªãch s·ª≠ v√† l·ªãch h·∫πn s·∫Øp t·ªõi</p>
        </div>
        <button className="patient-profile-btn-primary">üìÖ ƒê·∫∑t l·ªãch h·∫πn m·ªõi</button>
      </div>


      <div className="patient-profile-schedule-section">
        <h4>L·ªãch h·∫πn s·∫Øp t·ªõi</h4>
        <div className="patient-profile-appointment-list">

          <div className="patient-profile-appointment-item patient-profile-upcoming">
            <div className="patient-profile-appointment-time">
              <span className="patient-profile-time-icon">üïò</span>
            </div>
            <div className="patient-profile-appointment-details">
              <h5>Si√™u √¢m theo d√µi</h5>
              <p>25/05/2024 | 10:15 - 10:45</p>
              <p>BS. Nguy·ªÖn Lan Anh</p>
              <div className="patient-profile-appointment-actions">
                {/* <button className="patient-profile-btn-outline-red">Chi ti·∫øt</button> */}
                <button className="patient-profile-btn-outline-blue">D·ªùi l·ªãch</button>
              </div>
            </div>
            <button className="patient-profile-reschedule-btn">ƒê√£ l√™n l·ªãch</button>
          </div>
        </div>
      </div>


      <div className="patient-profile-schedule-section">
        <h4>L·ªãch s·ª≠ cu·ªôc h·∫πn</h4>
        <div className="patient-profile-appointment-list">
          <div className="patient-profile-appointment-item patient-profile-completed">
            <div className="patient-profile-appointment-time">
              <span className="patient-profile-time-icon patient-profile-completed">‚úÖ</span>
            </div>
            <div className="patient-profile-appointment-details">
              <h5>T∆∞ v·∫•n</h5>
              <p>05/05/2024 | 14:00 - 14:30</p>
              <p>BS. Nguy·ªÖn Lan Anh</p>
              {/* <button className="patient-profile-btn-outline-red">Xem ghi ch√∫</button> */}
            </div>
            <span className="patient-profile-status-badge patient-profile-completed">Ho√†n th√†nh</span>
          </div>
        </div>
      </div>
    </div>
  )


  const renderNotesTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-notes-header">
        <div>
          <h3>Ghi ch√∫ kh√°m b·ªánh</h3>
          <p>Ghi ch√∫ v√† theo d√µi qu√° tr√¨nh ƒëi·ªÅu tr·ªã</p>
        </div>
        {cycleStepDetails?.length === 0 && 
          <button className="patient-profile-btn-primary">üìù Th√™m ghi ch√∫</button>
        }
      </div>


      <div className="patient-profile-notes-section">
        <h4>Ghi ch√∫ theo giai ƒëo·∫°n ƒëi·ªÅu tr·ªã</h4>
        <div className="patient-profile-notes-list">
          {pastAndCurrentSteps.map((phase) =>
            phase.note && (
              <>
                <div key={`${phase.id}`} className="patient-profile-note-item" onClick={() => console.log(phase.note)}>
                    <div className="patient-profile-note-header">
                      <div className="patient-profile-note-date">
                        <span className="patient-profile-date-icon">üìÖ</span>
                        <span>{formatDate(phase.eventdate)}</span>
                      </div>
                      <span className="patient-profile-note-type">Giai ƒëo·∫°n {phase.stepOrder}: {mappingStepsName(phase.stepOrder)}</span>
                    </div>
                    <div className="patient-profile-note-content">
                      <h5>Ghi ch√∫ kh√°m:</h5>
                      <p>{phase.note}</p>
                    </div>
                    <div className="patient-profile-note-footer">
                      <span className="patient-profile-doctor-name">{phase.appointment[0]?.doctorName}</span>
                      <button className="patient-profile-btn-outline-blue" onClick={() => 
                        {
                          setUpdateCycleStepNoteForm({
                            cycleId: currentCycle?.cycleId,
                            stepOrder: phase.stepOrder,
                            note: phase.note || ''
                          }),
                          handleOpenUpdateCycleStepNoteModal()
                        }}
                        >Th√™m ghi ch√∫</button>
                    </div>
                </div>
              </>
            )
          )}
        </div>
      </div>
    </div>
  )


  const renderResultsTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-results-header">
        <div>
          <h3>K·∫øt qu·∫£ x√©t nghi·ªám</h3>
          <p>L·ªãch s·ª≠ c√°c x√©t nghi·ªám v√† k·∫øt qu·∫£</p>
        </div>
        <button className="patient-profile-btn-primary" onClick={() => handleOpenCreateTestResultModal()}>‚ûï Th√™m k·∫øt qu·∫£ m·ªõi</button>
      </div>


      <div className="patient-profile-results-by-phase">
        {pastAndCurrentSteps.map((phase) => {

          return (
            <div key={phase.id} className="patient-profile-phase-results-container">
              <div className="patient-profile-phase-results-header">
                <h4>Giai ƒëo·∫°n {phase.stepOrder}</h4>
                <span className="patient-profile-phase-period">{getCurrentStepPeriod(phase.stepOrder)}</span>
              </div>

              <div className="patient-profile-results-list">
                {cycleStepDetails?.[phase.stepOrder - 1]?.testResults?.map((result, resultIndex) => (
                  <div key={`${phase.id}-${resultIndex}`} className="patient-profile-result-item">
                    <div className="patient-profile-result-icon">
                      <span className="patient-profile-icon-purple">üìã</span>
                    </div>
                    <div className="patient-profile-result-details">
                      <h4>{result.name}</h4>
                      <p>Ng√†y: {formatDate(result.testDate)}</p>
                      <p>K·∫øt qu·∫£: {result.value} {result.unit}</p>
                      <p>Tr·∫°ng th√°i: <strong>{result.note}</strong></p>
                      <button className="patient-profile-btn-outline" 
                        onClick={() => {
                          setUpdateTestResultForm({
                          id: result.resultId,
                          name: result.name,
                          value: result.value,
                          unit: result.unit,
                          referenceRange: result.referenceRange,
                          note: result.note || '',
                          testDate: result.testDate
                        })
                        handleOpenUpdateTestResultModal()}}
                      >Ch·ªânh s·ª≠a</button>
                    </div>
                    <span className="patient-profile-status-badge patient-profile-completed">Ho√†n th√†nh</span>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  )

  const renderMedicationsTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-medications-header">
        <div>
          <h3>Thu·ªëc</h3>
          <p>Thu·ªëc hi·ªán t·∫°i v√† l·ªãch s·ª≠ thu·ªëc</p>
        </div>
        <button className="patient-profile-btn-primary" onClick={() => handleOpenCreateMedicationModal()}>‚ûï Th√™m thu·ªëc m·ªõi</button>
      </div>


      <div className="patient-profile-medications-section">
        <h4>Thu·ªëc theo giai ƒëo·∫°n ƒëi·ªÅu tr·ªã</h4>
        <div className="patient-profile-medication-cards">
          {pastAndCurrentSteps
            .flatMap((step) =>
              step.medicineSchedule.map((med, medIndex) => {
                const isActive =
                  step.statusCycleStep === 'ongoing' &&
                  !med.status?.includes('qua_han') &&
                  new Date(med.endDate) >= new Date(); // ki·ªÉm tra c√≤n trong th·ªùi gian d√πng

                return {
                  key: `${step.stepId}-${medIndex}`,
                  isActive,
                  step,
                  med,
                  medIndex
                };
              })
            )
            .sort((a, b) => {
              if (a.isActive && !b.isActive) return -1;
              if (!a.isActive && b.isActive) return 1;
              return 0;
            })
            .map(({ key, isActive, step, med }) => (
              <div key={key} className={`patient-profile-medication-card ${isActive ? 'patient-profile-active' : 'patient-profile-completed'}`}>
                <div className="patient-profile-med-header">
                  <h5>{med.medicineName}</h5>
                  <span className={`patient-profile-status-badge ${isActive ? 'patient-profile-active' : 'patient-profile-completed'}`}>
                    {isActive ? 'ƒêang d√πng' : 'ƒê√£ ho√†n th√†nh'}
                  </span>
                </div>
                <div className="patient-profile-med-details">
                  <p>
                    <strong>Li·ªÅu d√πng:</strong> {med.dose}
                  </p>
                  <p>
                    <strong>T·∫ßn su·∫•t:</strong> {med.frequency}
                  </p>
                  <p>
                    <strong>Th·ªùi gian:</strong> {med.startDate} ‚Üí {med.endDate}
                  </p>
                  <p>
                    <strong>Giai ƒëo·∫°n:</strong> B∆∞·ªõc {step.stepOrder} ‚Äì {step.serive}
                  </p>
                  {step.note && (
                    <p>
                      <strong>Ghi ch√∫:</strong> {step.note}
                    </p>
                  )}
                </div>
                <div className="patient-profile-med-actions">
                  <button className="patient-profile-btn-outline-blue">Xem chi ti·∫øt</button>
                  {isActive && <button className="patient-profile-btn-outline-red">Ng·ª´ng</button>}
                </div>
              </div>
            ))}
        </div>
      </div>
    </div>
  )

  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return renderOverviewTab()
      case "schedule":
        return renderScheduleTab()
      case "notes":
        return renderNotesTab()
      case "results":
        return renderResultsTab()
      case "medications":
        return renderMedicationsTab()
      default:
        return renderOverviewTab()
    }
  }

  const CreateReExamAppointmentModal = memo(({ isOpen, onClose }) => {

    const [isLoading, setIsLoading] = useState(false)

    const [formData, setFormData] = useState({
      customerId: currentCycle?.customerId || "",
      serviceId: currentCycle?.serviceId || "",
      date: "",
      note: "",
      cycleStepId: currentCycle?.cycleStep[currentCycle.cycleStep.length - 1].stepId || ""
    });

    if (!isOpen) return null;

    const handleCreateReExamAppointment = useCallback(async (e) => {
      e.preventDefault();
      setIsLoading(true)
      try {
        await createReExamAppointment(formData);
        await fetchData();
        await new Promise(resolve => setTimeout(resolve, 500));
        showSuccess("ƒê·∫∑t l·ªãch t√°i kh√°m th√†nh c√¥ng");
        onClose();
      } catch {
        showFail("ƒê·∫∑t l·ªãch th·∫•t b·∫°i");
      } finally {
        setIsLoading(false);
      }
    }, [formData, fetchData, onClose]);
    
    const handleChange = useCallback((field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }, [formData]);
    
    return (
      <div className="patient-profile-modal">
        <div className="patient-profile-modal-content">
          <h3>ƒê·∫∑t l·ªãch t√°i kh√°m</h3>
          <form onSubmit={handleCreateReExamAppointment}>
            <label>
              Ng√†y t√°i kh√°m:
              <input
                type="datetime-local"
                value={formData.date}
                onChange={(e) => handleChange('date', e.target.value)}
                required
              />
            </label>
            <label>
              Ghi ch√∫:
              <textarea
                value={formData.note}
                onChange={(e) => handleChange('note', e.target.value)}
                placeholder="Ghi ch√∫ (n·∫øu c√≥)"
              />
            </label>
            <button type="submit" className="patient-profile-btn-primary">{isLoading ? <BeatLoader /> : "ƒê·∫∑t l·ªãch"}</button>
          </form>
          <button
            className="patient-profile-btn-outline"
            onClick={onClose}
          >ƒê√≥ng</button>
        </div>
      </div>
    );
  });

  const CreateMedicationScheduleModal = memo(({ isOpen, onClose, allMedicines }) => {

    const [isLoading, setIsLoading] = useState(false)

    const [formData, setFormData] = useState({
      medicineId: "",
      cycleId: currentCycle?.cycleId || "",
      stepId: currentCycle?.cycleStep?.[currentCycle?.cycleStep?.length - 1]?.stepId || "",
      startDate: "",
      endDate: ""
    });
    
    if (!isOpen) return null;

    const handleCreateMedicationSchedule = useCallback(async (e) => {
      e.preventDefault();
      setIsLoading(true)
      try {
        await createMedicationSchedule(formData);
        await fetchData();
        await new Promise(resolve => setTimeout(resolve, 500));
        showSuccess("T·∫°o l·ªãch u·ªëng thu·ªëc th√†nh c√¥ng");
        onClose();
      } catch {
        showFail("T·∫°o l·ªãch u·ªëng thu·ªëc th·∫•t b·∫°i");
      } finally {
        setIsLoading(false);
      }
    }, [formData, fetchData, onClose]);
    
    const handleChange = useCallback((field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }, [formData]);
    
    return (
      <div className="patient-profile-modal">
        <div className="patient-profile-modal-content">
          <h3>T·∫°o l·ªãch u·ªëng thu·ªëc</h3>
          <form onSubmit={handleCreateMedicationSchedule}>
            <label>
              T√™n thu·ªëc:
              <select
                value={formData.medicineId}
                onChange={(e) => handleChange('medicineId', e.target.value)}
                required
              >
                <option value="">Ch·ªçn thu·ªëc</option>
                {allMedicines.map(med => (
                  <option key={med.medicinId} value={med.medicinId}>{med.name}</option>
                ))}
              </select>
            </label>
            <label>
              Ng√†y b·∫Øt ƒë·∫ßu:
              <input
                type="date"
                value={formData.startDate}
                onChange={(e) => handleChange('startDate', e.target.value)}
                required
                min={new Date(Date.now()).toISOString().split('T')}
              />
            </label>
            <label>
              Ng√†y k·∫øt th√∫c:
              <input
                type="date"
                value={formData.endDate}
                onChange={(e) => handleChange('endDate', e.target.value)}
                required
                min={new Date(Date.now()).toISOString().split('T')}
              />
            </label>
            <button type="submit" className="patient-profile-btn-primary">{isLoading ? <BeatLoader /> : "L∆∞u"}</button>
          </form>
          <button
            className="patient-profile-btn-outline"
            onClick={onClose}
          >ƒê√≥ng</button>
        </div>
      </div>
    );
  });

  const CreateTestResultModal = memo(({ isOpen, onClose }) => {

    const [isLoading, setIsLoading] = useState(false)

    const [formData, setFormData] = useState({
      appointmentId: appointmentId || "",
      name: "",
      value: null,
      unit: "",
      referenceRange: "",
      testDate: new Date(Date.now()).toISOString().split("T")[0],
      note: "",
      cycleStepId: currentCycle?.cycleStep?.[currentCycle?.cycleStep?.length - 1]?.stepId || ""
    });
    
    if (!isOpen) return null;

    const handleCreateTestResult = useCallback(async (e) => {
      e.preventDefault();
      setIsLoading(true)
      try {
        console.log("T·∫°o test r√π s√∫c: ", formData)
        await createTestResult(formData);
        await fetchData();
        await new Promise(resolve => setTimeout(resolve, 500));
        showSuccess("T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám th√†nh c√¥ng");
        onClose();
      } catch {
        showFail("T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám th·∫•t b·∫°i");
      } finally {
        setIsLoading(false);
      }
    }, [formData, fetchData, onClose]);
    
    const handleChange = useCallback((field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }, [formData]);
    
    return (
      <div className="patient-profile-modal">
        <div className="patient-profile-modal-content">
          <h3>T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám</h3>
          <form onSubmit={handleCreateTestResult}>
            <label>
              T√™n x√©t nghi·ªám:
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleChange('name', e.target.value)}
                required
              />
            </label>
            <label>
              K·∫øt qu·∫£:
              <input
                type="number"
                step="any"
                value={formData.value}
                onChange={(e) => handleChange('value', e.target.value === "" ? "" : parseFloat(e.target.value))}
                required
              />
            </label>
            <label>
              ƒê∆°n v·ªã:
              <input
                type="text"
                value={formData.unit}
                onChange={(e) => handleChange('unit', e.target.value)}
                required
              />
            </label>
            <label>
              Kho·∫£ng tham chi·∫øu:
              <input
                type="text"
                value={formData.referenceRange}
                onChange={(e) => handleChange('referenceRange', e.target.value)}
              />
            </label>
            <label>
              Ghi ch√∫:
              <textarea
                value={formData.note}
                onChange={(e) => handleChange('note', e.target.value)}
              />
            </label>
            <button type="submit" className="patient-profile-btn-primary">{isLoading ? <BeatLoader /> : "T·∫°o"}</button>
          </form>
          <button
            className="patient-profile-btn-outline"
            onClick={onClose}
          >ƒê√≥ng</button>
        </div>
      </div>
    );
  });

  const UpdateCycleStepNoteModal = memo(({ isOpen, onClose, form }) => {

    const [isLoading, setIsLoading] = useState(false)

    const [formData, setFormData] = useState({
      cycleId: form.cycleId || "",
      stepOrder: form.stepOrder || "",
      note: form.note || ""
    });

    if (!isOpen) return null;

    const handleUpdateCycleStepNote = useCallback(async (e) => {
      e.preventDefault();
      setIsLoading(true)
      try {
        const { cycleId, stepOrder, note } = formData;
        await updateCycleStepNote(cycleId, stepOrder, note);
        await fetchData();
        await new Promise(resolve => setTimeout(resolve, 500));
        showSuccess("C·∫≠p nh·∫≠t ghi ch√∫ th√†nh c√¥ng");
        onClose();
      } catch {
        showFail("C·∫≠p nh·∫≠t ghi ch√∫ th·∫•t b·∫°i");
      } finally {
        setIsLoading(false);
      }
    }, [formData, fetchData, onClose]);
    
    const handleChange = useCallback((field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }, [formData]);
    
    return (
      <div className="patient-profile-modal">
        <div className="patient-profile-modal-content">
          <h3>C·∫≠p nh·∫≠t ghi ch√∫ b∆∞·ªõc ƒëi·ªÅu tr·ªã</h3>
          <form onSubmit={handleUpdateCycleStepNote}>
            <label>
              Ghi ch√∫:
              <textarea
                value={formData.note}
                onChange={(e) => handleChange('note', e.target.value)}
                required
              />
            </label>
            <button type="submit" className="patient-profile-btn-primary">{isLoading ? <BeatLoader /> : "C·∫≠p nh·∫≠t"}</button>
          </form>
          <button
            className="patient-profile-btn-outline"
            onClick={onClose}
          >ƒê√≥ng</button>
        </div>
      </div>
    );
  });

  const UpdateTestResultModal = memo(({ isOpen, onClose, form }) => {

    const [isLoading, setIsLoading] = useState(false)

    const [formData, setFormData] = useState({
      id: form.id || "",
      name: form.name || "",
      value: form.value || "",
      unit: form.unit || "",
      referenceRange: form.referenceRange || "",
      note: form.note || "",
      testDate: form.testDate || ""
    });
    
    if (!isOpen) return null;

    const handleUpdateTestResult = useCallback(async (e) => {
      e.preventDefault();
      setIsLoading(true);
      try {
        const { id, ...dto } = formData;
        await updateTestResult(id, dto);
        await fetchData();
        await new Promise(resolve => setTimeout(resolve, 500));
        showSuccess("C·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám th√†nh c√¥ng");
        onClose();
      } catch {
        showFail("C·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám th·∫•t b·∫°i");
      } finally {
        setIsLoading(false);
      }
    }, [formData, fetchData, onClose]);
    
    const handleChange = useCallback((field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }, [formData]);
    
    return (
      <div className="patient-profile-modal">
        <div className="patient-profile-modal-content">
          <h3>C·∫≠p nh·∫≠t k·∫øt qu·∫£ x√©t nghi·ªám</h3>
          <form onSubmit={handleUpdateTestResult}>
            <label>
              T√™n x√©t nghi·ªám:
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleChange('name', e.target.value)}
                required
              />
            </label>
            <label>
              K·∫øt qu·∫£:
              <input
                type="text"
                value={formData.value}
                onChange={(e) => handleChange('value', e.target.value)}
                required
              />
            </label>
            <label>
              ƒê∆°n v·ªã:
              <input
                type="text"
                value={formData.unit}
                onChange={(e) => handleChange('unit', e.target.value)}
                required
              />
            </label>
            <label>
              Kho·∫£ng tham chi·∫øu:
              <input
                type="text"
                value={formData.referenceRange}
                onChange={(e) => handleChange('referenceRange', e.target.value)}
              />
            </label>
            <label>
              Ghi ch√∫:
              <textarea
                value={formData.note}
                onChange={(e) => handleChange('note', e.target.value)}
              />
            </label>
            <label>
              Ng√†y x√©t nghi·ªám:
              <input
                type="date"
                value={formData.testDate}
                onChange={(e) => handleChange('testDate', e.target.value)}
                required
              />
            </label>
            <button type="submit" className="patient-profile-btn-primary">{isLoading ? <BeatLoader /> : "C·∫≠p nh·∫≠t"}</button>
          </form>
          <button
            className="patient-profile-btn-outline"
            onClick={onClose}
          >ƒê√≥ng</button>
        </div>
      </div>
    );
  });

  return (
    <div className="patient-profile">
      <div className="patient-profile-header">
        <div className="patient-profile-header-left">
          <a href="#" onClick={(e) => { e.preventDefault(); window.history.back(); }} className="patient-profile-back-btn">‚Üê Quay l·∫°i</a>
          <div className="patient-profile-header-info">
            <h1>Cu·ªôc h·∫πn v·ªõi {patientData.name}</h1>
            <div className="patient-profile-appointment-info">
              <span className="patient-profile-appointment-type">{patientData.currentAppointment.type}</span>
              <span className="patient-profile-appointment-time">üïò {patientData.currentAppointment.date} | {patientData.currentAppointment.time}</span>
              <span className="patient-profile-appointment-status">{patientData.currentAppointment.status}</span>
            </div>
            <p className="patient-profile-appointment-details">{patientData.currentAppointment.details}</p>
          </div>
        </div>
        <div className="patient-profile-header-actions">
          <button className="patient-profile-btn-danger">K·∫øt th√∫c cu·ªôc h·∫πn</button>
        </div>
      </div>


      <div className="patient-profile-container">
        <div className="patient-profile-sidebar">
          <div className="patient-profile-patient-info">
            <div className="patient-profile-patient-avatar">
              <img src="/src/asset/ivf.jpg" alt="Patient Avatar" />
            </div>
            <div className="patient-profile-patient-details">
              <h2>{patientData.name}</h2>
              <p className="patient-profile-patient-id">ID: {patientData.id}</p>
              <span className="patient-profile-status-badge patient-profile-active">{patientData.status}</span>
            </div>
          </div>


          <div className="patient-profile-patient-basic-info">
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Tu·ªïi:</span>
              <span className="patient-profile-value">{patientData.age}</span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Ng√†y sinh:</span>
              <span className="patient-profile-value">{patientData.birthDate}</span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Gi·ªõi t√≠nh:</span>
              <span className="patient-profile-value patient-profile-gender-female">{patientData.gender}</span>
            </div>


            <div className="patient-profile-info-row">
              <span className="patient-profile-label">ƒêi·ªÅu tr·ªã:</span>
              <span className="patient-profile-value">{patientData.treatment}</span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Ng√†y b·∫Øt ƒë·∫ßu:</span>
              <span className="patient-profile-value">{patientData.startDate}</span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">B√°c sƒ© ph·ª• tr√°ch:</span>
              <span className="patient-profile-value">{patientData.doctor}</span>
            </div>
          </div>


          <div className="patient-profile-collapsible-sections">
            <div className="patient-profile-section">
              <button className="patient-profile-section-header" onClick={() => toggleSection("medicalHistory")}>
                <span>Ti·ªÅn s·ª≠ b·ªánh</span>
                <span>{expandedSections.medicalHistory ? "‚ñ≤" : "‚ñº"}</span>
              </button>
              {expandedSections.medicalHistory && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.medicalHistory.map((item, index) => (
                      <li key={index}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>


            <div className="patient-profile-section">
              <button className="patient-profile-section-header" onClick={() => toggleSection("familyHistory")}>
                <span>Ti·ªÅn s·ª≠ gia ƒë√¨nh</span>
                <span>{expandedSections.familyHistory ? "‚ñ≤" : "‚ñº"}</span>
              </button>
              {expandedSections.familyHistory && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.familyHistory.map((item, index) => (
                      <li key={index}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>


            <div className="patient-profile-section">
              <button className="patient-profile-section-header" onClick={() => toggleSection("allergies")}>
                <span>D·ªã ·ª©ng</span>
                <span>{expandedSections.allergies ? "‚ñ≤" : "‚ñº"}</span>
              </button>
              {expandedSections.allergies && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.allergies.map((item, index) => (
                      <li key={index}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>


            <div className="patient-profile-section">
              <button className="patient-profile-section-header" onClick={() => toggleSection("medicalRecords")}>
                <span>L·ªãch s·ª≠ y t·∫ø</span>
                <span>{expandedSections.medicalRecords ? "‚ñ≤" : "‚ñº"}</span>
              </button>
              {expandedSections.medicalRecords && (
                <div className="patient-profile-section-content">
                  <div className="patient-profile-medical-record">
                    <div className="patient-profile-record-date">15/05/2024</div>
                    <div className="patient-profile-record-content">Si√™u √¢m theo d√µi - Ph√°t tri·ªÉn nang tr·ª©ng t·ªët</div>
                  </div>
                  <div className="patient-profile-medical-record">
                    <div className="patient-profile-record-date">10/05/2024</div>
                    <div className="patient-profile-record-content">X√©t nghi·ªám hormone - K·∫øt qu·∫£ trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng</div>
                  </div>
                  <div className="patient-profile-medical-record">
                    <div className="patient-profile-record-date">05/05/2024</div>
                    <div className="patient-profile-record-content">T∆∞ v·∫•n kh·ªüi ƒë·∫ßu chu k·ª≥ IVF #2</div>
                  </div>
                </div>
              )}
            </div>


            <div className="patient-profile-section">
              <button className="patient-profile-section-header" onClick={() => toggleSection("prescribedMeds")}>
                <span>Thu·ªëc ƒë√£ k√™</span>
                <span>{expandedSections.prescribedMeds ? "‚ñ≤" : "‚ñº"}</span>
              </button>
              {expandedSections.prescribedMeds && (
                <div className="patient-profile-section-content">
                  <div className="patient-profile-prescribed-med">
                    <div className="patient-profile-med-name">Gonal-F 450 IU</div>
                    <div className="patient-profile-med-usage">Ti√™m d∆∞·ªõi da, 1 l·∫ßn/ng√†y, bu·ªïi t·ªëi</div>
                    <div className="patient-profile-med-period">01/05/2024 - 15/05/2024</div>
                  </div>
                  <div className="patient-profile-prescribed-med">
                    <div className="patient-profile-med-name">Cetrotide 0.25mg</div>
                    <div className="patient-profile-med-usage">Ti√™m d∆∞·ªõi da, 1 l·∫ßn/ng√†y, bu·ªïi s√°ng</div>
                    <div className="patient-profile-med-period">10/05/2024 - 18/05/2024</div>
                  </div>
                </div>
              )}
            </div>
          </div>


          <div className="patient-profile-sidebar-actions">
            <button className="patient-profile-btn-outline">üí¨ Nh·∫Øn tin</button>
          </div>
        </div>


        <div className="patient-profile-main-content">
          <div className="patient-profile-tabs">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={`patient-profile-tab ${activeTab === tab.id ? "patient-profile-active" : ""}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <span>{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>
          
          { loading ? 
            (
              <div style={{ display: "flex", justifyContent: "center", alignItems: "center", minHeight: "60vh" }}>
                <HashLoader size={80} color="#36d7b7" />
              </div>
            ) : (renderTabContent())
          }
        </div>
      </div>
        
      <CreateReExamAppointmentModal
        isOpen={isOpenCreateReExamModal}
        onClose={handleCloseCreateReExamAppointmentModal}
      />
      
      <CreateMedicationScheduleModal
        isOpen={isOpenCreateMedicationModal}
        onClose={handleCloseCreateMedicationModal}
        allMedicines={allMedicines}
      />
      
      <CreateTestResultModal
        isOpen={isOpenCreateTestResultModal}
        onClose={handleCloseCreateTestResultModal}
      />
      
      <UpdateCycleStepNoteModal
        isOpen={isOpenUpdateCycleStepNoteModal}
        onClose={handleCloseUpdateCycleStepNoteModal}
        form={updateCycleStepNoteForm}
      />
      
      <UpdateTestResultModal
        isOpen={isOpenUpdateTestResultModal}
        onClose={handleCloseUpdateTestResultModal}
        form={updateTestResultForm}
      />
    </div>
  )
}

export default PatientProfileLayout
