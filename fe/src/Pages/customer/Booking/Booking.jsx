import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Calendar, Clock, Check, Phone, FileText } from "lucide-react";
import "./Booking.css";
import apiConsultant from "../../../features/service/apiConsultant";


const Booking = () => {
  const mockData = [
    {
      schedule_id: 1,
      date: "2025-06-30",
      start_time: "08:00:00",
      end_time: "09:30:00",
      status: 0,
      doctor_id: 3,
    },
    {
      schedule_id: 2,
      date: "2025-06-30",
      start_time: "09:30:00",
      end_time: "11:00:00",
      status: 0,
      doctor_id: 3,
    },
    {
      schedule_id: 3,
      date: "2025-06-30",
      start_time: "13:00:00",
      end_time: "14:30:00",
      status: 0,
      doctor_id: 3,
    },
    {
      schedule_id: 4,
      date: "2025-06-30",
      start_time: "14:30:00",
      end_time: "16:00:00",
      status: 0,
      doctor_id: 3,
    },
  ];


  const appointmentTypes = [
    {
      id: "consultation",
      title: "T∆∞ V·∫•n Ban ƒê·∫ßu",
      description: "Bu·ªïi t∆∞ v·∫•n ƒë·∫ßu ti√™n ƒë·ªÉ th·∫£o lu·∫≠n v·ªÅ c√°c l·ª±a ch·ªçn ƒëi·ªÅu tr·ªã",
      icon: Calendar,
    },
    {
      id: "followup",
      title: "Kh√°m Theo D√µi",
      description: "Bu·ªïi kh√°m theo d√µi cho b·ªánh nh√¢n hi·ªán t·∫°i",
      icon: Clock,
    },
    {
      id: "procedure",
      title: "Th·ªß Thu·∫≠t ƒêi·ªÅu Tr·ªã",
      description: "L·ªãch h·∫πn cho th·ªß thu·∫≠t ƒëi·ªÅu tr·ªã c·ª• th·ªÉ",
      icon: Check,
    },
    // {
    //   id: 'other',
    //   title: 'Kh√°c',
    //   description: 'Lo·∫°i l·ªãch h·∫πn kh√°c kh√¥ng ƒë∆∞·ª£c li·ªát k√™ ·ªü tr√™n',
    //   icon: '‚Ñπ'
    // }
  ];


  const procedureTypes = [
    "Ch·ªçn lo·∫°i th·ªß thu·∫≠t",
    "Si√™u √¢m ƒë·∫ßu d√≤",
    "X√©t nghi·ªám m√°u",
    "Th·ª• tinh trong ·ªëng nghi·ªám (IVF)",
    "B∆°m tinh tr√πng v√†o bu·ªìng t·ª≠ cung",
    "Tr·ª©ng ƒë√¥ng tr√∫ng",
    "X√©t nghi·ªám di truy·ªÅn",
    "ƒêi·ªÅu tr·ªã v√¥ sinh nam",
  ];


  const categories = ["T·∫•t C·∫£", "N·ªôi Ti·∫øt Sinh S·∫£n", "Ph·ªïi H·ªçc", "Si√™u √Çm"];


  // State management
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedAppointmentType, setSelectedAppointmentType] = useState("");
  const [selectedProcedureType, setSelectedProcedureType] = useState("");
  const [hasVisited, setHasVisited] = useState("no");
  const [selectedCategory, setSelectedCategory] = useState("T·∫•t C·∫£");
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [showCalendar, setShowCalendar] = useState(false);
  const [personalInfo, setPersonalInfo] = useState({
    reason: "",
  });


  const [bookingComplete, setBookingComplete] = useState(false);
  const [appointmentDetails, setAppointmentDetails] = useState(null);
  const [customerId, setCustomerId] = useState(null);
  const [doctors, setDoctors] = useState([]);
  const [availableSchedules, setAvailableSchedules] = useState([]);
  const today = new Date();


  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        const customerRes = await apiConsultant.getCustomerInfo();
        setCustomerId(customerRes.data.id);


        const doctorsRes = await apiConsultant.getActiveDoctors();
        setDoctors(doctorsRes.data); // ghi ƒë√® danh s√°ch mock
      } catch (error) {
        console.error("L·ªói khi fetch d·ªØ li·ªáu:", error);
      }
    };


    fetchInitialData();
  }, []);


  // Filter doctors by category
  const filteredDoctors =
    selectedCategory === "T·∫•t C·∫£"
      ? doctors
      : doctors.filter(
          (doctor) =>
            doctor.category === selectedCategory ||
            doctor.subcategory === selectedCategory
        );


  // Generate calendar dates for June 2025
  const generateCalendarDates = () => {
    const mockData = [
      {
        schedule_id: 1,
        date: "2025-06-30",
        start_time: "08:00:00",
        end_time: "09:30:00",
        status: 0,
        doctor_id: 3,
      },
      {
        schedule_id: 2,
        date: "2025-06-30",
        start_time: "09:30:00",
        end_time: "11:00:00",
        status: 0,
        doctor_id: 3,
      },
      {
        schedule_id: 3,
        date: "2025-06-30",
        start_time: "13:30:00",
        end_time: "14:30:00",
        status: 0,
        doctor_id: 3,
      },
      {
        schedule_id: 4,
        date: "2025-06-30",
        start_time: "14:30:00",
        end_time: "16:00:00",
        status: 0,
        doctor_id: 3,
      },
    ];
    const dates = [];
    const currentDate = new Date(2025, 5, 1); // June 2025
    const daysInMonth = new Date(2025, 5 + 1, 0).getDate();


    // Add empty cells for days before the first day of the month
    const firstDayOfWeek = currentDate.getDay();
    for (let i = 0; i < firstDayOfWeek; i++) {
      dates.push(null);
    }


    // Add all days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      dates.push(day);
    }


    return dates;
  };


  const handleStepNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };


  const handleStepBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };


  const handleDoctorSelect = async (doctor) => {
    // G√°n selectedDoctor v·ªõi id t∆∞∆°ng th√≠ch backend
    setSelectedDoctor({
      ...doctor,
      id: doctor.userId, // ƒê·∫£m b·∫£o c√≥ 'id' ƒë·ªÉ g·ª≠i ƒëi ƒë√∫ng trong payload
    });


    if (selectedDate) {
      try {
        const res = await apiConsultant.getAvailableSchedules(
          doctor.userId,
          selectedDate
        );
        setAvailableSchedules(res);
      } catch (err) {
        console.error("L·ªói l·∫•y l·ªãch r·∫£nh:", err);
        setAvailableSchedules([]);
      }
    }
  };


  const handleDateSelect = async (date) => {
    const formatted = `2025-06-${String(date).padStart(2, "0")}`; // yyyy-MM-dd
    setSelectedDate(formatted);
    setShowCalendar(false);


    if (selectedDoctor) {
      try {
        const res = await apiConsultant.getAvailableSchedules(
          selectedDoctor.userId,
          formatted
        );
        setAvailableSchedules(res);
      } catch (err) {
        console.error("L·ªói l·∫•y l·ªãch r·∫£nh:", err);
        setAvailableSchedules([]);
      }
    }
  };


  const handleTimeSelect = (time) => {
    setSelectedTime(time);
  };


  const handlePersonalInfoChange = (field, value) => {
    setPersonalInfo((prev) => ({
      ...prev,
      [field]: value,
    }));
  };


  const isFormValid = () => {
    return Object.values(personalInfo).every((value) => value.trim() !== "");
  };


  const handleFinalSubmit = async () => {
    try {
      const payload = {
        doctorId: selectedDoctor?.userId,
        customerId: customerId,
        date: `${selectedDate}T${selectedTime}`,
        note: personalInfo.reason,
      };


      console.log("üü° D·ªÆ LI·ªÜU G·ª¨I L√äN API ƒê·∫∂T L·ªäCH:", payload);


      const res = await apiConsultant.registerAppointment(payload);


      const appointmentTypeObj = appointmentTypes.find(
        (type) => type.id === selectedAppointmentType
      );


      const details = {
        doctor: selectedDoctor,
        date: selectedDate,
        time: selectedTime,
        reason: personalInfo.reason,
        appointmentType: appointmentTypeObj, // <== TH√äM D√íNG N√ÄY
      };


      setAppointmentDetails(details);
      setBookingComplete(true);
    } catch (error) {
      console.error("üî¥ ƒê·∫∂T L·ªäCH TH·∫§T B·∫†I:", error);
      alert("ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };


  // Step 1: Select Appointment Type
  const renderStep1 = () => (
    <div className="step-content">
      <h2>Ch·ªçn Lo·∫°i L·ªãch H·∫πn</h2>
      <p>Vui l√≤ng ch·ªçn lo·∫°i l·ªãch h·∫πn ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>


      <div className="appointment-types">
        {appointmentTypes.map((type) => (
          <div
            key={type.id}
            className={`appointment-type ${
              selectedAppointmentType === type.id ? "selected" : ""
            }`}
            onClick={() => setSelectedAppointmentType(type.id)}
          >
            <div className="appointment-icon">
              <type.icon size={24} />
            </div>
            <div className="appointment-info">
              <h3>{type.title}</h3>
              <p>{type.description}</p>
            </div>
          </div>
        ))}
      </div>


      {selectedAppointmentType === "procedure" && (
        <div className="procedure-selection">
          <h3>Lo·∫°i Th·ªß Thu·∫≠t</h3>
          <select
            value={selectedProcedureType}
            onChange={(e) => setSelectedProcedureType(e.target.value)}
            className="procedure-select"
          >
            {procedureTypes.map((procedure, index) => (
              <option key={index} value={procedure}>
                {procedure}
              </option>
            ))}
          </select>
        </div>
      )}


      <div className="visited-question">
        <p>B·∫°n ƒê√£ T·ª´ng ƒê·∫øn Ph√≤ng Kh√°m C·ªßa Ch√∫ng T√¥i Ch∆∞a?</p>
        <div className="radio-group">
          <label>
            <input
              type="radio"
              name="visited"
              value="yes"
              checked={hasVisited === "yes"}
              onChange={(e) => setHasVisited(e.target.value)}
            />
            C√≥
          </label>
          <label>
            <input
              type="radio"
              name="visited"
              value="no"
              checked={hasVisited === "no"}
              onChange={(e) => setHasVisited(e.target.value)}
            />
            Kh√¥ng
          </label>
        </div>
      </div>


      <button
        className="next-btn"
        onClick={handleStepNext}
        disabled={!selectedAppointmentType}
      >
        Ti·∫øp Theo ‚Üí
      </button>
    </div>
  );


  // Step 2: Select Doctor
  const renderStep2 = () => (
    <div className="step-content">
      <h2>Ch·ªçn B√°c Sƒ©</h2>
      <p>Vui l√≤ng ch·ªçn b√°c sƒ© b·∫°n mu·ªën ƒë·∫∑t l·ªãch h·∫πn</p>


      <div className="category-filters">
        {categories.map((category) => (
          <button
            key={category}
            className={`category-btn ${
              selectedCategory === category ? "active" : ""
            }`}
            onClick={() => setSelectedCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>


      <div className="doctors-list">
        {filteredDoctors.map((doctor) => (
          <div
            key={doctor.id}
            className={`doctor-card ${
              selectedDoctor?.id === doctor.id ? "selected" : ""
            }`}
            onClick={() => handleDoctorSelect(doctor)}
          >
            <div className="upper">
              <div className="doctor-avatar">
                {doctor.image ? (
                  <img src={doctor.image} alt={doctor.name} />
                ) : (
                  <div className="avatar-placeholder"></div>
                )}
              </div>


              <div className="doctor-info">
                <h3>{doctor.name}</h3>
                <p>{doctor.specialty}</p>
              </div>
            </div>


            <div className="lower">
              <span>
                <Calendar size={16} /> C√≥ l·ªãch t·ª´ {doctor.availableDate}
              </span>
              <span>
                <Check size={16} /> {doctor.experience}
              </span>
            </div>
          </div>
        ))}
      </div>


      <div className="step-navigation">
        <button className="back-btn" onClick={handleStepBack}>
          Quay L·∫°i
        </button>
        <button
          className="next-btn"
          onClick={handleStepNext}
          disabled={!selectedDoctor}
        >
          Ti·∫øp Theo ‚Üí
        </button>
      </div>
    </div>
  );


  // Step 3: Select Date and Time
  const renderStep3 = () => (
    <div className="step-content">
      <h2>Ch·ªçn Ng√†y v√† Gi·ªù</h2>
      <p>Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù ph√π h·ª£p cho l·ªãch h·∫πn c·ªßa b·∫°n</p>


      <div className="datetime-selection">
        <div className="date-section">
          <h3>Ch·ªçn Ng√†y</h3>
          <div
            className="date-input"
            onClick={() => setShowCalendar(!showCalendar)}
          >
            {selectedDate || "Ch·ªçn ng√†y"}
          </div>


          {showCalendar && (
            <div className="calendar">
              <div className="calendar-header">
                <h4>
                  {today.getMonth()}-{today.getUTCFullYear()}
                </h4>
              </div>
              <div className="calendar-weekdays">
                {["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"].map((day) => (
                  <div key={day} className="weekday">
                    {day}
                  </div>
                ))}
              </div>
              <div className="calendar-dates">
                {generateCalendarDates().map((date, index) => (
                  <div
                    key={index}
                    className={`calendar-date ${date ? "available" : "empty"} ${
                      date === today.getDate() ? "today" : ""
                    }`}
                    onClick={() => date && handleDateSelect(date)}
                  >
                    {date}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>


        <div className="time-section">
          <h3>Ch·ªçn Gi·ªù</h3>
          <div className="selected-doctor-info">
            <div className="doctor-avatar">
              <div className="avatar-placeholder"></div>
            </div>
            <div>
              <p>
                <strong>{selectedDoctor?.name}</strong>
              </p>
              <p>{selectedDoctor?.specialty}</p>
            </div>
          </div>


          <div className="time-slots">
            {Array.isArray(availableSchedules) &&
            availableSchedules.length > 0 ? (
              availableSchedules.map((slot) => {
                const time = slot.startTime.slice(0, 5);
                const isSelected = selectedTime === time;
                return (
                  <button
                    key={time}
                    className={`time-slot ${isSelected ? "selected" : ""}`}
                    onClick={() => handleTimeSelect(time)}
                  >
                    {time}
                  </button>
                );
              })
            ) : (
              <p style={{ color: "#999", fontStyle: "italic" }}>
                B√°c sƒ© kh√¥ng c√≥ l·ªãch tr·ªëng trong ng√†y ƒë√£ ch·ªçn.
              </p>
            )}
          </div>
        </div>
      </div>


      <div className="notes">
        <h4>L∆∞u √Ω:</h4>
        <ul>
          <li>
            <Clock size={16} /> Vui l√≤ng ƒë·∫øn tr∆∞·ªõc 15 ph√∫t ƒë·ªÉ ho√†n th√†nh th·ªß t·ª•c
            ƒëƒÉng k√Ω.
          </li>
          <li>
            <Phone size={16} /> N·∫øu b·∫°n c·∫ßn h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn, vui l√≤ng
            th√¥ng b√°o cho ch√∫ng t√¥i √≠t nh·∫•t 24 gi·ªù tr∆∞·ªõc l·ªãch h·∫πn.
          </li>
          <li>
            <FileText size={16} /> Mang theo h·ªì s∆° y t·∫ø li√™n quan, k·∫øt qu·∫£ x√©t
            nghi·ªám tr∆∞·ªõc ƒë√¢y v√† danh s√°ch thu·ªëc hi·ªán t·∫°i (n·∫øu c√≥).
          </li>
        </ul>
      </div>


      <div className="step-navigation">
        <button className="back-btn" onClick={handleStepBack}>
          Quay L·∫°i
        </button>
        <button
          className="next-btn"
          onClick={handleStepNext}
          disabled={!selectedDate || !selectedTime}
        >
          Ti·∫øp Theo ‚Üí
        </button>
      </div>
    </div>
  );


  // Step 4: Personal Information
  const renderStep4 = () => (
    <div className="step-content">
      <h2>Th√¥ng Tin ƒê·∫∑t L·ªãch</h2>
      <p>Vui l√≤ng cung c·∫•p l√Ω do b·∫°n mu·ªën t∆∞ v·∫•n v·ªõi b√°c sƒ©</p>


      <div className="personal-form">
        <div className="booking-form">
          <label>L√Ω Do Kh√°m</label>
          <textarea
            placeholder="Vui l√≤ng m√¥ t·∫£ ng·∫Øn g·ªçn l√Ω do b·∫°n ƒë·∫∑t l·ªãch h·∫πn n√†y"
            value={personalInfo.reason}
            onChange={(e) => handlePersonalInfoChange("reason", e.target.value)}
            rows="3"
          />
        </div>
      </div>


      <div className="step-navigation">
        <button className="back-btn" onClick={handleStepBack}>
          Quay L·∫°i
        </button>
        <button
          className="complete-btn"
          onClick={handleFinalSubmit}
          disabled={!isFormValid()}
        >
          Ho√†n T·∫•t ƒê·∫∑t L·ªãch ‚Üí
        </button>
      </div>
    </div>
  );


  // Booking Complete
  const renderBookingComplete = () => (
    <div className="step-content booking-complete">
      <div className="success-icon">
        <Check size={64} />
      </div>
      <h2>ƒê·∫∑t L·ªãch H·∫πn Th√†nh C√¥ng!</h2>
      <p>
        C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·∫πn v·ªõi ch√∫ng t√¥i. Ch√∫ng t√¥i ƒë√£ g·ª≠i x√°c nh·∫≠n ƒë·∫øn
        email c·ªßa b·∫°n.
      </p>


      <div className="appointment-summary">
        <h3>Chi Ti·∫øt L·ªãch H·∫πn</h3>
        <div className="summary-item">
          <span>B√°c sƒ©:</span>
          <span>{appointmentDetails?.doctor?.name}</span>
        </div>
        <div className="summary-item">
          <span>Ng√†y:</span>
          <span>{appointmentDetails?.date}</span>
        </div>
        <div className="summary-item">
          <span>Gi·ªù:</span>
          <span>{appointmentDetails?.time}</span>
        </div>
        <div className="summary-item">
          <span>Lo·∫°i l·ªãch h·∫πn:</span>
          <span>{appointmentDetails?.appointmentType?.title}</span>
        </div>
        <div className="summary-item">
          <span>L√Ω do kh√°m:</span>
          <span>{appointmentDetails?.reason}</span>
        </div>
      </div>


      <div className="important-notes">
        <p>
          Vui l√≤ng ƒë·∫øn tr∆∞·ªõc 15 ph√∫t ƒë·ªÉ ho√†n th√†nh th·ªß t·ª•c ƒëƒÉng k√Ω. Mang theo h·ªì
          s∆° y t·∫ø li√™n quan v√† th·∫ª b·∫£o hi·ªÉm (n·∫øu c√≥).
        </p>
        <p>
          N·∫øu b·∫°n c·∫ßn h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn, vui l√≤ng th√¥ng b√°o cho ch√∫ng t√¥i √≠t
          nh·∫•t 24 gi·ªù tr∆∞·ªõc l·ªãch h·∫πn qua s·ªë ƒëi·ªán tho·∫°i (024) 123-4567.
        </p>
      </div>


      <div className="action-buttons">
        <button className="secondary-btn" onClick={() => navigate("/homepage")}>
          Quay V·ªÅ Trang Ch·ªß
        </button>
        <button className="primary-btn">Qu·∫£n L√Ω L·ªãch H·∫πn</button>
      </div>
    </div>
  );


  return (
    <div className="booking">
      <div className="container">
        <div className="breadcrumb">
          <a href="/homepage">Trang Ch·ªß</a> / <span>ƒê·∫∑t L·ªãch H·∫πn</span>
        </div>


        <div className="booking-header">
          <h1>ƒê·∫∑t L·ªãch H·∫πn</h1>
          <p>
            ƒê·∫∑t l·ªãch h·∫πn v·ªõi m·ªôt trong c√°c chuy√™n gia sinh s·∫£n c·ªßa ch√∫ng t√¥i ƒë·ªÉ
            b·∫Øt ƒë·∫ßu h√†nh tr√¨nh ƒëi·ªÅu tr·ªã hi·∫øm mu·ªôn c·ªßa b·∫°n.
          </p>
        </div>


        {!bookingComplete && (
          <div className="progress-steps">
            {[1, 2, 3, 4].map((step) => (
              <div
                key={step}
                className={`step ${currentStep >= step ? "active" : ""} ${
                  currentStep > step ? "completed" : ""
                }`}
              >
                <div className="step-number">{step}</div>
                <div className="step-label">
                  {step === 1 && "Lo·∫°i L·ªãch H·∫πn"}
                  {step === 2 && "Ch·ªçn B√°c Sƒ©"}
                  {step === 3 && "Ng√†y & Gi·ªù"}
                  {step === 4 && "Th√¥ng Tin C√° Nh√¢n"}
                </div>
              </div>
            ))}
          </div>
        )}


        <div className="booking-content">
          {bookingComplete ? (
            renderBookingComplete()
          ) : (
            <>
              {currentStep === 1 && renderStep1()}
              {currentStep === 2 && renderStep2()}
              {currentStep === 3 && renderStep3()}
              {currentStep === 4 && renderStep4()}
            </>
          )}
        </div>
      </div>
    </div>
  );
};


export default Booking;