import React, { useState } from "react";
import mockPatientData from "../../../data/mockPatientData";
import { User } from "lucide-react";
import "./Profile.css";

const formatDateDisplay = (isoDate) => {
  if (!isoDate) return "";
  const [year, month, day] = isoDate.split("-");
  return `${day}/${month}/${year}`;
};

const parseDateInput = (isoDate) => {
  return isoDate;
};

const Profile = () => {
  const [patientData, setPatientData] = useState(mockPatientData);

  const [activeTab, setActiveTab] = useState("overview");
  const [expandedSections, setExpandedSections] = useState({
    medicalHistory: true,
    familyHistory: true,
    allergies: true,
  });

  // State cho ch·∫ø ƒë·ªô ch·ªânh s·ª≠a basic info
  const [isEditingBasic, setIsEditingBasic] = useState(false);
  // State t·∫°m cho form ch·ªânh s·ª≠a
  const [editBasicData, setEditBasicData] = useState({
    name: patientData.name,
    birthDate: patientData.birthDate,
    gender: patientData.gender,
    phone: patientData.phone,
    email: patientData.email,
    address: patientData.address,
  });

  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  // X·ª≠ l√Ω input thay ƒë·ªïi khi editing basic info
  const handleEditBasicChange = (e) => {
    const { name, value } = e.target;
    setEditBasicData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const startEditBasic = () => {
    setEditBasicData({
      name: patientData.name,
      birthDate: patientData.birthDate,
      gender: patientData.gender,
      phone: patientData.phone,
      email: patientData.email,
      address: patientData.address,
    });
    setIsEditingBasic(true);
  };

  const cancelEditBasic = () => {
    setIsEditingBasic(false);
  };

  const saveEditBasic = () => {
    setPatientData((prev) => ({
      ...prev,
      name: editBasicData.name,
      birthDate: editBasicData.birthDate,
      gender: editBasicData.gender,
      phone: editBasicData.phone,
      email: editBasicData.email,
      address: editBasicData.address,
    }));
    setIsEditingBasic(false);
  };

  const tabs = [
    { id: "overview", label: "T·ªïng quan", icon: "üë§" },
    { id: "schedule", label: "L·ªãch h·∫πn", icon: "üìÖ" },
    { id: "results", label: "K·∫øt qu·∫£ x√©t nghi·ªám", icon: "üìã" },
    { id: "medications", label: "Thu·ªëc", icon: "üíä" },
  ];

  const renderOverviewTab = () => {
    const plan = patientData.treatmentPlan || {};
    return (
      <div className="patient-profile-tab-content">
        <div className="patient-profile-treatment-plan">
          <h3>K·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã</h3>
          <p className="patient-profile-treatment-subtitle">
            Th√¥ng tin v·ªÅ k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã hi·ªán t·∫°i
          </p>

          <div className="patient-profile-treatment-cards">
            <div className="patient-profile-treatment-card patient-profile-current">
              <div className="patient-profile-card-icon">
                <span className="patient-profile-icon-red">‚ö†Ô∏è</span>
              </div>
              <div className="patient-profile-card-content">
                <h4>Giai ƒëo·∫°n hi·ªán t·∫°i</h4>
                <p>{plan.currentStage}</p>
              </div>
            </div>

            <div className="patient-profile-treatment-card patient-profile-next">
              <div className="patient-profile-card-icon">
                <span className="patient-profile-icon-blue">üìÖ</span>
              </div>
              <div className="patient-profile-card-content">
                <h4>Giai ƒëo·∫°n ti·∫øp theo</h4>
                <p>{plan.nextStage}</p>
                {plan.nextExpectedDate && (
                  <span className="patient-profile-date">
                    D·ª± ki·∫øn: {formatDateDisplay(plan.nextExpectedDate)}
                  </span>
                )}
              </div>
            </div>
          </div>

          {plan.note && (
            <div className="patient-profile-treatment-note">
              <span className="patient-profile-note-icon">üìù</span>
              <div>
                <h4>Ghi ch√∫ ƒëi·ªÅu tr·ªã</h4>
                <p>{plan.note}</p>
              </div>
            </div>
          )}

          {patientData.medications && patientData.medications.length > 0 && (
            <div className="patient-profile-current-medications">
              <div className="patient-profile-section-header">
                <span className="patient-profile-section-icon">üíä</span>
                <h4>Thu·ªëc hi·ªán t·∫°i</h4>
              </div>
              <div className="patient-profile-medication-list">
                {patientData.medications
                  .filter((m) => m.status === "active")
                  .map((med) => (
                    <div
                      key={med.id}
                      className="patient-profile-medication-item"
                    >
                      <div className="patient-profile-med-info">
                        <h5>{med.name}</h5>
                        <p>Li·ªÅu l∆∞·ª£ng: {med.dosage}</p>
                        <p>T·∫ßn su·∫•t: {med.frequency}</p>
                        {med.startDate && (
                          <span className="patient-profile-med-date">
                            B·∫Øt ƒë·∫ßu: {formatDateDisplay(med.startDate)}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderScheduleTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-schedule-header">
        <div>
          <h3>L·ªãch h·∫πn</h3>
          <p>L·ªãch s·ª≠ v√† l·ªãch h·∫πn s·∫Øp t·ªõi</p>
        </div>
        <button className="patient-profile-btn-primary">üìÖ ƒê·∫∑t l·ªãch h·∫πn m·ªõi</button>
      </div>

      <div className="patient-profile-schedule-section">
        <h4>L·ªãch h·∫πn s·∫Øp t·ªõi</h4>
        <div className="patient-profile-appointment-list">
          {patientData.schedule?.upcoming?.length > 0 ? (
            patientData.schedule.upcoming.map((app) => (
              <div
                key={app.id}
                className="patient-profile-appointment-item patient-profile-upcoming"
              >
                <div className="patient-profile-appointment-time">
                  <span className="patient-profile-time-icon">üïò</span>
                </div>
                <div className="patient-profile-appointment-details">
                  <h5>{app.title}</h5>
                  <p>
                    {formatDateDisplay(app.date)} | {app.time}
                  </p>
                  <p>{app.doctor}</p>
                  <div className="patient-profile-appointment-actions">
                    <button className="patient-profile-btn-outline-red">
                      Chi ti·∫øt
                    </button>
                    <button className="patient-profile-btn-outline-blue">
                      D·ªùi l·ªãch
                    </button>
                  </div>
                </div>
                <button className="patient-profile-reschedule-btn">
                  ƒê√£ l√™n l·ªãch
                </button>
              </div>
            ))
          ) : (
            <p>Kh√¥ng c√≥ l·ªãch h·∫πn s·∫Øp t·ªõi.</p>
          )}
        </div>
      </div>

      <div className="patient-profile-schedule-section">
        <h4>L·ªãch s·ª≠ cu·ªôc h·∫πn</h4>
        <div className="patient-profile-appointment-list">
          {patientData.schedule?.history?.length > 0 ? (
            patientData.schedule.history.map((app) => (
              <div
                key={app.id}
                className="patient-profile-appointment-item patient-profile-completed"
              >
                <div className="patient-profile-appointment-time">
                  <span className="patient-profile-time-icon patient-profile-completed">
                    ‚úÖ
                  </span>
                </div>
                <div className="patient-profile-appointment-details">
                  <h5>{app.title}</h5>
                  <p>
                    {formatDateDisplay(app.date)} | {app.time}
                  </p>
                  <p>{app.doctor}</p>
                  <button className="patient-profile-btn-outline-red">
                    Xem ghi ch√∫
                  </button>
                </div>
                <span className="patient-profile-status-badge patient-profile-completed">
                  Ho√†n th√†nh
                </span>
              </div>
            ))
          ) : (
            <p>Ch∆∞a c√≥ l·ªãch s·ª≠ cu·ªôc h·∫πn.</p>
          )}
        </div>
      </div>
    </div>
  );

  const renderResultsTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-results-header">
        <div>
          <h3>K·∫øt qu·∫£ x√©t nghi·ªám</h3>
          <p>L·ªãch s·ª≠ c√°c x√©t nghi·ªám v√† k·∫øt qu·∫£</p>
        </div>
        <button className="patient-profile-btn-primary">
          ‚ûï Th√™m k·∫øt qu·∫£ m·ªõi
        </button>
      </div>

      <div className="patient-profile-results-list">
        {patientData.results?.length > 0 ? (
          patientData.results.map((res) => (
            <div key={res.id} className="patient-profile-result-item">
              <div className="patient-profile-result-icon">
                <span className="patient-profile-icon-purple">üìã</span>
              </div>
              <div className="patient-profile-result-details">
                <h4>{res.title}</h4>
                <p>Ng√†y: {formatDateDisplay(res.date)}</p>
                <p>K·∫øt qu·∫£: {res.result}</p>
                <button className="patient-profile-btn-outline">
                  Xem chi ti·∫øt
                </button>
              </div>
              <span className="patient-profile-status-badge patient-profile-completed">
                Ho√†n th√†nh
              </span>
            </div>
          ))
        ) : (
          <p>Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám.</p>
        )}
      </div>
    </div>
  );

  const renderMedicationsTab = () => (
    <div className="patient-profile-tab-content">
      <div className="patient-profile-medications-header">
        <div>
          <h3>Thu·ªëc</h3>
          <p>Thu·ªëc hi·ªán t·∫°i v√† l·ªãch s·ª≠ thu·ªëc</p>
        </div>
        <button className="patient-profile-btn-primary">
          ‚ûï Th√™m thu·ªëc m·ªõi
        </button>
      </div>

      <div className="patient-profile-medications-section">
        <h4>Thu·ªëc hi·ªán t·∫°i</h4>
        <div className="patient-profile-medication-cards">
          {patientData.medications
            ?.filter((m) => m.status === "active")
            .map((med) => (
              <div
                key={med.id}
                className="patient-profile-medication-card patient-profile-active"
              >
                <div className="patient-profile-med-header">
                  <h5>{med.name}</h5>
                  <span className="patient-profile-status-badge patient-profile-active">
                    ƒêang d√πng
                  </span>
                </div>
                <div className="patient-profile-med-details">
                  <p>
                    <strong>Li·ªÅu l∆∞·ª£ng:</strong> {med.dosage}
                  </p>
                  <p>
                    <strong>T·∫ßn su·∫•t:</strong> {med.frequency}
                  </p>
                  {med.startDate && (
                    <p>
                      <strong>B·∫Øt ƒë·∫ßu:</strong>{" "}
                      {formatDateDisplay(med.startDate)}
                    </p>
                  )}
                </div>
                <div className="patient-profile-med-actions">
                  <button className="patient-profile-btn-outline-blue">
                    Ch·ªânh s·ª≠a
                  </button>
                  <button className="patient-profile-btn-outline-red">
                    Ng·ª´ng
                  </button>
                </div>
              </div>
            ))}
          {(!patientData.medications ||
            patientData.medications.filter((m) => m.status === "active")
              .length === 0) && <p>Ch∆∞a c√≥ thu·ªëc ƒëang d√πng.</p>}
        </div>
        {/* N·∫øu mu·ªën hi·ªÉn th·ªã l·ªãch s·ª≠ thu·ªëc ƒë√£ ng∆∞ng: l·ªçc m.status==="stopped" */}
      </div>
    </div>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return renderOverviewTab();
      case "schedule":
        return renderScheduleTab();
      case "results":
        return renderResultsTab();
      case "medications":
        return renderMedicationsTab();
      default:
        return renderOverviewTab();
    }
  };

  return (
    <div className="patient-cus-profile">
      <div className="patient-profile-header">
        <a
          href="#"
          onClick={(e) => {
            e.preventDefault();
            window.history.back();
          }}
          className="patient-profile-back-btn"
        >
          ‚Üê Quay l·∫°i
        </a>
        <h1>H·ªì s∆° b·ªánh nh√¢n</h1>
      </div>

      <div className="patient-profile-container">
        <div className="patient-profile-sidebar">
          <div className="patient-profile-patient-info">
            <div className="patient-profile-patient-avatar">
              <img src="/src/asset/ivf.jpg" alt="Patient Avatar" />
            </div>
            <div className="patient-profile-patient-details">
              {isEditingBasic ? (
                // Khi ch·ªânh s·ª≠a t√™n
                <input
                  type="text"
                  name="name"
                  value={editBasicData.name}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                />
              ) : (
                <h2>{patientData.name}</h2>
              )}
              <p className="patient-profile-patient-id">ID: {patientData.id}</p>
              <span className="patient-profile-status-badge patient-profile-active">
                {patientData.status}
              </span>
            </div>
          </div>

          <div className="patient-profile-patient-basic-info">
            {/* N√∫t edit/cancel/save */}
            <div className="edit-basic-buttons">
              {isEditingBasic ? (
                <>
                  <button
                    className="patient-profile-btn-outline-blue"
                    onClick={saveEditBasic}
                  >
                    L∆∞u
                  </button>
                  <button
                    className="patient-profile-btn-outline-red"
                    onClick={cancelEditBasic}
                  >
                    H·ªßy
                  </button>
                </>
              ) : (
                <button
                  className="patient-profile-btn-outline"
                  onClick={startEditBasic}
                >
                  ‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin
                </button>
              )}
            </div>

            {/* Hi·ªÉn th·ªã ho·∫∑c form editing th√¥ng tin c∆° b·∫£n */}
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Ng√†y sinh:</span>
              {isEditingBasic ? (
                <input
                  type="date"
                  name="birthDate"
                  value={editBasicData.birthDate}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                />
              ) : (
                <span className="patient-profile-value">
                  {formatDateDisplay(patientData.birthDate)}
                </span>
              )}
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Gi·ªõi t√≠nh:</span>
              {isEditingBasic ? (
                <select
                  name="gender"
                  value={editBasicData.gender}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                >
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="male">Nam</option>
                  <option value="female">N·ªØ</option>
                  <option value="other">Kh√°c</option>
                </select>
              ) : (
                <span
                  className={`patient-profile-value patient-profile-gender-${
                    patientData.gender === "female" ? "female" : "male"
                  }`}
                >
                  {patientData.gender === "male"
                    ? "Nam"
                    : patientData.gender === "female"
                    ? "N·ªØ"
                    : "Kh√°c"}
                </span>
              )}
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">ƒêi·ªán tho·∫°i:</span>
              {isEditingBasic ? (
                <input
                  type="tel"
                  name="phone"
                  value={editBasicData.phone}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                />
              ) : (
                <span className="patient-profile-value">
                  {patientData.phone}
                </span>
              )}
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Email:</span>
              {isEditingBasic ? (
                <input
                  type="email"
                  name="email"
                  value={editBasicData.email}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                />
              ) : (
                <span className="patient-profile-value">
                  {patientData.email}
                </span>
              )}
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">ƒê·ªãa ch·ªâ:</span>
              {isEditingBasic ? (
                <input
                  type="text"
                  name="address"
                  value={editBasicData.address}
                  onChange={handleEditBasicChange}
                  className="patient-profile-input-edit"
                />
              ) : (
                <span className="patient-profile-value">
                  {patientData.address}
                </span>
              )}
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">ƒêi·ªÅu tr·ªã:</span>
              <span className="patient-profile-value">
                {patientData.treatment}
              </span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">Ng√†y b·∫Øt ƒë·∫ßu:</span>
              <span className="patient-profile-value">
                {formatDateDisplay(patientData.startDate)}
              </span>
            </div>
            <div className="patient-profile-info-row">
              <span className="patient-profile-label">
                B√°c sƒ© ph·ª• tr√°ch:
              </span>
              <span className="patient-profile-value">
                {patientData.doctor}
              </span>
            </div>
          </div>

          <div className="patient-profile-collapsible-sections">
            <div className="patient-profile-section">
              <button
                className="patient-profile-section-header"
                onClick={() => toggleSection("medicalHistory")}
              >
                <span>Ti·ªÅn s·ª≠ b·ªánh</span>
                <span>
                  {expandedSections.medicalHistory ? "‚ñ≤" : "‚ñº"}
                </span>
              </button>
              {expandedSections.medicalHistory && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.medicalHistory.map((item, idx) => (
                      <li key={idx}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            <div className="patient-profile-section">
              <button
                className="patient-profile-section-header"
                onClick={() => toggleSection("familyHistory")}
              >
                <span>Ti·ªÅn s·ª≠ gia ƒë√¨nh</span>
                <span>
                  {expandedSections.familyHistory ? "‚ñ≤" : "‚ñº"}
                </span>
              </button>
              {expandedSections.familyHistory && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.familyHistory.map((item, idx) => (
                      <li key={idx}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            <div className="patient-profile-section">
              <button
                className="patient-profile-section-header"
                onClick={() => toggleSection("allergies")}
              >
                <span>D·ªã ·ª©ng</span>
                <span>
                  {expandedSections.allergies ? "‚ñ≤" : "‚ñº"}
                </span>
              </button>
              {expandedSections.allergies && (
                <div className="patient-profile-section-content">
                  <ul>
                    {patientData.allergies.map((item, idx) => (
                      <li key={idx}>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>

          <div className="patient-profile-sidebar-actions">
            <button className="patient-profile-btn-outline">‚úèÔ∏è Li√™n h·ªá</button>
            <button className="patient-profile-btn-primary">üìÖ ƒê·∫∑t l·ªãch h·∫πn</button>
          </div>
        </div>

        <div className="patient-profile-main-content">
          <div className="patient-profile-tabs">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={`patient-profile-tab ${
                  activeTab === tab.id ? "patient-profile-active" : ""
                }`}
                onClick={() => setActiveTab(tab.id)}
              >
                <span>{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>

          {renderTabContent()}
        </div>
      </div>
    </div>
  );
};

export default Profile;
